version: 2.1

commands:
  destory_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
        name: Execute bucket yml
        command: |
          aws cloudformation deploy --template-file bucket.yml  --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create infrastructure
          command: |
            aws cloudformation deploy --template-file template.yml  --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}  --region us-east-1
      - run: return 1
      - destory_environment

  configure_infrastructure:
    docker:
      - image: python:3.9.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["86:ee:eb:76:92:0b:0f:f6:2a:33:f6:83:7d:67:2b:14"]
      - run:
          name: Install Ansible
          command: |
            apt-get update -y
            apt install ansible -y
            which ansible

      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main.yml

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk  add --update curl
      - run:
          name: "smoke test"
          command: return 1
      - destory_environment

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation  list-exports --query "Exports[?Name==\`PipelineID\`].Value"  --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
    # Destroy the previous production version's S3 bucket and CloudFormation stack.
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack.
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy  --template-file cloudfront.yml  --stack-name production-distro  --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  myWorkflow:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
        - get_last_deployment_id
        - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
      #- create_infrastructure
      #- smoke_test
      #- configure_infrastructure

